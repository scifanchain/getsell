generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Author {
  id                  String             @id
  username            String             @unique
  displayName         String?            @map("display_name")
  email               String?            @unique
  bio                 String?
  avatarUrl           String?            @map("avatar_url")
  walletAddress       String?            @map("wallet_address")
  publicKey           String?            @map("public_key")
  privateKeyEncrypted String?            @map("private_key_encrypted")
  totalWorks          Int                @default(0) @map("total_works")
  totalWords          Int                @default(0) @map("total_words")
  status              String             @default("active")
  preferences         String?
  lastActiveAt        DateTime?          @map("last_active_at")
  createdAt           DateTime           @map("created_at")
  updatedAt           DateTime           @map("updated_at")
  chapters            Chapter[]
  collaborationLogs   CollaborationLog[]
  contentVersions     ContentVersion[]
  editedContents      Content[]          @relation("ContentEditor")
  contents            Content[]
  works               Work[]

  @@map("authors")
}

model Work {
  id                   String             @id
  title                String
  subtitle             String?
  description          String?
  coverImageUrl        String?            @map("cover_image_url")
  genre                String?
  tags                 String?
  authorId             String             @map("author_id")
  collaborationMode    String             @default("solo") @map("collaboration_mode")
  collaborators        String?
  status               String             @default("draft")
  progressPercentage   Float              @default(0.0) @map("progress_percentage")
  totalWords           Int                @default(0) @map("total_words")
  totalCharacters      Int                @default(0) @map("total_characters")
  chapterCount         Int                @default(0) @map("chapter_count")
  targetWords          Int?               @map("target_words")
  targetCompletionDate DateTime?          @map("target_completion_date")
  blockchainHash       String?            @map("blockchain_hash")
  nftTokenId           String?            @map("nft_token_id")
  nftContractAddress   String?            @map("nft_contract_address")
  copyrightHash        String?            @map("copyright_hash")
  isPublic             Boolean            @default(false) @map("is_public")
  licenseType          String             @default("all_rights_reserved") @map("license_type")
  publishedAt          DateTime?          @map("published_at")
  metadata             String?
  createdAt            DateTime           @map("created_at")
  updatedAt            DateTime           @map("updated_at")
  chapters             Chapter[]
  characters           Character[]
  collaborationLogs    CollaborationLog[]
  contents             Content[]
  author               Author             @relation(fields: [authorId], references: [id])

  @@map("works")
}

model Chapter {
  id                 String    @id
  workId             String    @map("work_id")
  parentId           String?   @map("parent_id")
  level              Int       @default(1)
  orderIndex         Int       @map("order_index")
  title              String
  subtitle           String?
  description        String?
  type               String    @default("chapter")
  status             String    @default("draft")
  wordCount          Int       @default(0) @map("word_count")
  characterCount     Int       @default(0) @map("character_count")
  contentCount       Int       @default(0) @map("content_count")
  childChapterCount  Int       @default(0) @map("child_chapter_count")
  progressPercentage Float     @default(0.0) @map("progress_percentage")
  targetWords        Int?      @map("target_words")
  authorId           String    @map("author_id")
  storyTimelineStart String?   @map("story_timeline_start")
  storyTimelineEnd   String?   @map("story_timeline_end")
  tags               String?
  blockchainHash     String?   @map("blockchain_hash")
  isPublic           Boolean   @default(false) @map("is_public")
  publishedAt        DateTime? @map("published_at")
  metadata           String?
  createdAt          DateTime  @map("created_at")
  updatedAt          DateTime  @map("updated_at")
  parent             Chapter?  @relation("ChapterHierarchy", fields: [parentId], references: [id])
  children           Chapter[] @relation("ChapterHierarchy")
  author             Author    @relation(fields: [authorId], references: [id])
  work               Work      @relation(fields: [workId], references: [id])
  contents           Content[]

  @@map("chapters")
}

model Content {
  id                  String           @id
  workId              String           @map("work_id")
  chapterId           String?          @map("chapter_id")
  orderIndex          Int              @map("order_index")
  title               String?
  type                String           @default("text")
  contentJson          String?  @map("content_json") // ProseMirror 文档的 JSON 表示
  contentHtml         String?          @map("content_html")
  contentText         String?          @map("content_text")
  wordCount           Int              @default(0) @map("word_count")
  characterCount      Int              @default(0) @map("character_count")
  paragraphCount      Int              @default(0) @map("paragraph_count")
  status              String           @default("draft")
  version             Int              @default(1)
  authorId            String           @map("author_id")
  isCollaborative     Boolean          @default(false) @map("is_collaborative")
  contributors        String?
  storyTimeline       String?          @map("story_timeline")
  charactersInvolved  String?          @map("characters_involved")
  location            String?
  sceneDescription    String?          @map("scene_description")
  tags                String?
  emotionTone         String?          @map("emotion_tone")
  importanceLevel     Int              @default(3) @map("importance_level")
  contentHash         String?          @map("content_hash")
  blockchainTimestamp DateTime?        @map("blockchain_timestamp")
  copyrightStatus     String           @default("draft") @map("copyright_status")
  isPublic            Boolean          @default(false) @map("is_public")
  publishedAt         DateTime?        @map("published_at")
  writingDuration     Int              @default(0) @map("writing_duration")
  lastEditedAt        DateTime         @map("last_edited_at")
  lastEditorId        String           @map("last_editor_id")
  notes               String?
  metadata            String?
  createdAt           DateTime         @map("created_at")
  updatedAt           DateTime         @map("updated_at")
  versions            ContentVersion[]
  lastEditor          Author           @relation("ContentEditor", fields: [lastEditorId], references: [id])
  author              Author           @relation(fields: [authorId], references: [id])
  chapter             Chapter?         @relation(fields: [chapterId], references: [id])
  work                Work             @relation(fields: [workId], references: [id])

  @@map("contents")
}

model ContentVersion {
  id             String  @id
  contentId      String  @map("content_id")
  contentJson    String  @map("content_json") // ProseMirror 文档的 JSON 表示
  contentHtml    String? @map("content_html")
  contentText    String? @map("content_text")
  wordCount      Int     @default(0) @map("word_count")
  characterCount Int     @default(0) @map("character_count")
  versionNumber  Int     @map("version_number")
  changeSummary  String? @map("change_summary")
  authorId       String  @map("author_id")
  blockchainHash String? @map("blockchain_hash")
  createdAt      DateTime @map("created_at")
  author         Author  @relation(fields: [authorId], references: [id])
  content        Content @relation(fields: [contentId], references: [id])

  @@map("content_versions")
}

model Character {
  id            String  @id
  workId        String  @map("work_id")
  name          String
  description   String?
  appearance    String?
  personality   String?
  background    String?
  relationships String?
  imageUrl      String? @map("image_url")
  tags          String?
  createdAt     DateTime @map("created_at")
  updatedAt     DateTime @map("updated_at")
  work          Work    @relation(fields: [workId], references: [id])

  @@map("characters")
}


model BlockchainSync {
  id              String  @id
  contentId       String  @map("content_id")
  contentType     String  @map("content_type")
  blockchainHash  String  @map("blockchain_hash")
  transactionHash String? @map("transaction_hash")
  blockNumber     Int?    @map("block_number")
  syncStatus      String  @default("pending") @map("sync_status")
  syncData        String? @map("sync_data")
  createdAt       DateTime @map("created_at")
  updatedAt       DateTime @map("updated_at")

  @@map("blockchain_sync")
}

model CollaborationLog {
  id         String  @id
  workId     String  @map("work_id")
  authorId   String  @map("author_id")
  action     String
  targetType String  @map("target_type")
  targetId   String  @map("target_id")
  changes    String?
  message    String?
  createdAt  DateTime @map("created_at")
  author     Author  @relation(fields: [authorId], references: [id])
  work       Work    @relation(fields: [workId], references: [id])

  @@map("collaboration_logs")
}

model SchemaVersion {
  version   Int      @id @default(autoincrement())
  appliedAt DateTime @map("applied_at")

  @@map("schema_version")
}
